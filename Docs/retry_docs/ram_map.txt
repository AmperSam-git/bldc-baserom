This documents serves as a detailed reference on the purpose of the RAM addresses used by Retry, and how you can use them.

First things first, Retry uses a chunk of area at $7FB400 ($40A400 on SA-1 roms) by default. If you want to change that, open "ram.asm". This is the same area used by old Retry, so it should usually be fine (on lorom, while on SA-1 I changed it to not conflict with lx5's DSS).
Then, all the used addresses are defined as this freeram + <offset>, to makes it easier to manage them and have a clearer code. The first 12 addresses (offset $00-$0B) are the same as the old Retry patch: this was done intentionally so that resources that interact with old Retry should also work on this one (for example, the "Individual Dragon Coins Save" patch expects the "hurry up" flag to be 2 bytes after the "is respawning flag").

Now for the actual RAM addresses (names are prefixed with "!ram_" in ram.asm, and offset is from !retry_freeram):

;=============================================================================================;
;      Name       ; Offset  ; Size  ;                       Description                       ;
;=============================================================================================;
; timer           ;   $00   ;  $03  ; Used to hold the level's initial timer value, to reset  ;
;                 ;         ;       ; it to the correct value when respawning. You can change ;
;                 ;         ;       ; this to change the level's timer on the fly (after      ;
;                 ;         ;       ; respawn).                                               ;
;=============================================================================================;
; respawn         ;   $03   ;  $02  ; Destination value to go to when respawning. Usually set ;
;                 ;         ;       ; when getting a checkpoint of any kind. You can use it   ;
;                 ;         ;       ; to dynamically change where the player will respawn.    ;
;                 ;         ;       ; You can see the format at $7E19B8/$7E19D8 in the        ;
;                 ;         ;       ; SMWCentral RAM Map.                                     ;
;=============================================================================================;
; is_respawning   ;   $05   ;  $01  ; Flag set when dying with instant/prompt retry active.   ;
;                 ;         ;       ; Can be used to check if a room is being loaded by Retry ;
;                 ;         ;       ; or it's just a normal level entrance/transition.        ;
;=============================================================================================;
; music_to_play   ;   $06   ;  $01  ; Music number that has to be played after respawn. Only  ;
;                 ;         ;       ; used when AMK is patched. If #$FF, the song's samples   ;
;                 ;         ;       ; will be reloaded.                                       ;
;=============================================================================================;
; hurry_up        ;   $07   ;  $01  ; Flag set when the timer drops under 99 seconds and the  ;
;                 ;         ;       ; music speeds up. When set, the death song will be played;
;                 ;         ;       ; when dying even if it shouldn't, to reset the level's   ;
;                 ;         ;       ; song's tempo.                                           ;
;=============================================================================================;
; door_dest       ;   $08   ;  $02  ; It holds the destination value for the current entrance,;
;                 ;         ;       ; set when going to a sublevel via a door/pipe/etc. It's  ;
;                 ;         ;       ; used to set the checkpoint to the current entrance when ;
;                 ;         ;       ; using the 02/03 option in the checkpoint table.         ;
;=============================================================================================;
; music_backup    ;   $0A   ;  $01  ; Holds the song number that was playing right before     ;
;                 ;         ;       ; playing the death song. It's copied to $0DDA when dying,;
;                 ;         ;       ; which prevents the samples to be reloaded if the same   ;
;                 ;         ;       ; song is played again afterwards (for AMK).              ;
;=============================================================================================;
; update_request  ;   $0B   ;  $01  ; Flag set when dying if the retry prompt is active.      ;
;                 ;         ;       ; It makes the NMI handler upload the prompt letters to   ;
;                 ;         ;       ; VRAM, as specified by settings.asm (usually, SP1). It's ;
;                 ;         ;       ; set to 0 right after. You can set this mid-level if you ;
;                 ;         ;       ; need the letters GFX to be loaded for some reason.      ;
;=============================================================================================;
; prompt_phase    ;   $0C   ;  $01  ; Holds the value for the current phase of the prompt box.;
;                 ;         ;       ; The values go as follows:                               ;
;                 ;         ;       ; - $00: retry prompt is off.                             ;
;                 ;         ;       ; - $01: box is expanding.                                ;
;                 ;         ;       ; - $02: box fully expanded, options are shown.           ;
;                 ;         ;       ; - $03: box is shrinking, "retry" was selected.          ;
;                 ;         ;       ; - $04: box finished shrinking, "retry" was selected.    ;
;                 ;         ;       ; - $05: box is shrinking, "exit" was selected.           ;
;                 ;         ;       ; - $06: box finished shrinking, "exit" was selected.     ;
;                 ;         ;       ; After calling $00F606 (death routine), you can set this ;
;                 ;         ;       ; to $06 to make the vanilla death animation play out and ;
;                 ;         ;       ; override the current Retry settings.                    ;
;=============================================================================================;
; update_window   ;   $0D   ;  $01  ; Flag set during prompt handling to make the window      ;
;                 ;         ;       ; change shape to properly show the options. Needed to    ;
;                 ;         ;       ; avoid occasional flickering when updating it on the same;
;                 ;         ;       ; frame it finished expanding.                            ;
;=============================================================================================;
; is_dying        ;   $0E   ;  $01  ; Flag set when Mario dies. Used to skip the death music  ;
;                 ;         ;       ; when applicable (but only on the first death frame) and ;
;                 ;         ;       ; to handle the prompt/respawn. Reset on level load.      ;
;=============================================================================================;
; 9D_backup       ;   $0F   ;  $01  ; Holds a backup of the $9D value when going through a    ;
;                 ;         ;       ; normal transition, which is then restored when respawn- ;
;                 ;         ;       ; ing. This makes pipe entrances into a level consistent  ;
;                 ;         ;       ; when respawning, since sprites are locked during them   ;
;                 ;         ;       ; only if $9D was set before the transition (i.e., if a   ;
;                 ;         ;       ; pipe was entered, but not if a door was entered).       ;
;=============================================================================================;
; l2_backup       ;   $10   ;  $01  ; Holds a backup of the "interactable layer 2" flag during;
;                 ;         ;       ; level load when respawning. The flag is disabled for a  ;
;                 ;         ;       ; brief period of time to avoid some jank behaviors when  ;
;                 ;         ;       ; respawning in layer 2 levels. The flag is then restored ;
;                 ;         ;       ; from this address before the level fades in.            ;
;=============================================================================================;
; prompt_override ;   $11   ;  $01  ; Can be used to override the Retry settings of the cur-  ;
;                 ;         ;       ; rent level. It follows the same format as the "effect"  ;
;                 ;         ;       ; table in tables.asm. It's only reset on title screen    ;
;                 ;         ;       ; load, meaning that its effect will last until you set it;
;                 ;         ;       ; back to 0 yourself.                                     ;
;=============================================================================================;
; disable_exit    ;   $12   ;  $01  ; If set, the Retry prompt won't show the "exit" option.  ;
;                 ;         ;       ; It's set to !disable_exit_option on title screen load.  ;
;                 ;         ;       ; You can also change it at any time to remove the option ;
;                 ;         ;       ; in certain situations.                                  ;
;=============================================================================================;
; set_checkpoint  ;   $13   ;  $02  ; If the low byte is set to any value other than $FF,     ;
;                 ;         ;       ; it will trigger a checkpoint according to the checkpoint;
;                 ;         ;       ; table. Alternatively, you can set the whole 16-bit      ;
;                 ;         ;       ; address to an entrance value to trigger a checkpoint    ;
;                 ;         ;       ; that will take you to that entrance (a-la custom midway ;
;                 ;         ;       ; object). For the entrance format, see $7E19B8/$7E19D8 in;
;                 ;         ;       ; the SMWCentral RAM Map.                                 ;
;                 ;         ;       ; Additionally, setting the low byte to the special value ;
;                 ;         ;       ; $80 will reset the current level's checkpoint.          ;
;                 ;         ;       ; This can be used to integrate custom midway blocks/     ;
;                 ;         ;       ; sprites with retry's multiple midway system. For more   ;
;                 ;         ;       ; info, see "docs/troubleshooting.txt".                   ;
;=============================================================================================;
; prompt_x_pos    ;   $15   ;  $01  ; Holds the X position at which the Retry prompt should   ;
;                 ;         ;       ; appear at. You can write to it at any time. Note that   ;
;                 ;         ;       ; this address is only reset on title screen load.        ;
;=============================================================================================;
; prompt_y_pos    ;   $16   ;  $01  ; Holds the Y position at which the Retry prompt should   ;
;                 ;         ;       ; appear at. You can write to it at any time. Note that   ;
;                 ;         ;       ; this address is only reset on title screen load.        ;
;=============================================================================================;
; disable_box     ;   $17   ;  $01  ; If set, the Retry prompt's black box will be disabled.  ;
;                 ;         ;       ; It's set to !no_prompt_box on title screen load, but you;
;                 ;         ;       ; can also change it at any time. Suggested to be set if  ;
;                 ;         ;       ; also changing !prompt_x_pos and !prompt_y_pos during    ;
;                 ;         ;       ; gameplay.                                               ;
;=============================================================================================;
; play_sfx        ;   $18   ;  $01  ; Flag set on level transition when getting a room check- ;
;                 ;         ;       ; point. Used to play the midway SFX during level init.   ;
;                 ;         ;       ; Only read/written if !room_cp_sfx != $00.               ;
;=============================================================================================;
; reserved        ;   $19   ;  $07  ; Unused, but reserved for future expansion.              ;
;                 ;         ;       ; Usage as free ram is not recommended.                   ;
;=============================================================================================;
; death_counter   ;   $20   ;  $05  ; Holds the amount of deaths occurred. Each byte holds the;
;                 ;         ;       ; value of a digit in the counter (from left to right).   ;
;                 ;         ;       ; Saved to SRAM by default.                               ;
;=============================================================================================;
; checkpoint      ;   $25   ;  $C0  ; Checkpoint data for each level (2 bytes per level).     ;
;                 ;         ;       ; Holds the destination value of the latest checkpoint    ;
;                 ;         ;       ; obtained in each level. Saved to SRAM by default.       ;
;=============================================================================================;
; cust_obj_data   ;   $E5   ;  Var. ; Data for all the possible custom midway objects loaded  ;
;                 ;         ;       ; in the level, plus a counter for how many of these are  ;
;                 ;         ;       ; in the level. Each one uses 4 bytes, so this uses       ;
;                 ;         ;       ; (4*!max_custom_midway_num)+1 bytes. For each object,    ;
;                 ;         ;       ; there's a 2 bytes identifier (based on its index in the ;
;                 ;         ;       ; map16 data) and the destination value that this midway  ;
;                 ;         ;       ; will set when grabbed (based on the object's extension).;
;=============================================================================================;
